{"version":3,"file":"data-processing-worker.bundled.js","mappings":"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","sources":["webpack://songcluster/./src/workers/data-processing-worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\r\n\r\n// Define types for communication between main thread and worker\r\ntype ProcessingMethod = 'none' | 'standardize' | 'normalize';\r\ntype NormalizationRange = [number, number];\r\n\r\ninterface ProcessDataPayload {\r\n    vectors: number[][];\r\n    songIds: string[];\r\n    isOHEColumn: boolean[];\r\n    method: ProcessingMethod;\r\n    range?: NormalizationRange; // Only used for 'normalize'\r\n}\r\n\r\n// --- Helper Functions for Scaling ---\r\n\r\n// Calculates mean and standard deviation for each column\r\nconst getColumnStats = (vectors: number[][]): { means: number[], stdDevs: number[] } => {\r\n    if (!vectors || vectors.length === 0) {\r\n        return { means: [], stdDevs: [] };\r\n    }\r\n    const numCols = vectors[0].length;\r\n    const numRows = vectors.length;\r\n    const means: number[] = Array(numCols).fill(0);\r\n    const stdDevs: number[] = Array(numCols).fill(0);\r\n\r\n    // Calculate means\r\n    for (let j = 0; j < numCols; j++) {\r\n        let sum = 0;\r\n        for (let i = 0; i < numRows; i++) {\r\n            sum += vectors[i][j];\r\n        }\r\n        means[j] = sum / numRows;\r\n    }\r\n\r\n    // Calculate standard deviations\r\n    for (let j = 0; j < numCols; j++) {\r\n        let sumSqDiff = 0;\r\n        for (let i = 0; i < numRows; i++) {\r\n            sumSqDiff += Math.pow(vectors[i][j] - means[j], 2);\r\n        }\r\n        // Use population standard deviation (divide by N). Use sample (N-1) if preferred.\r\n        stdDevs[j] = Math.sqrt(sumSqDiff / numRows);\r\n    }\r\n\r\n    return { means, stdDevs };\r\n};\r\n\r\n// Calculates min and max for each column\r\nconst getColumnMinMax = (vectors: number[][]): { mins: number[], maxs: number[] } => {\r\n    if (!vectors || vectors.length === 0) {\r\n        return { mins: [], maxs: [] };\r\n    }\r\n    const numCols = vectors[0].length;\r\n    const mins: number[] = [...vectors[0]]; // Initialize with first row\r\n    const maxs: number[] = [...vectors[0]]; // Initialize with first row\r\n\r\n    for (let j = 0; j < numCols; j++) {\r\n        for (let i = 1; i < vectors.length; i++) {\r\n            if (vectors[i][j] < mins[j]) mins[j] = vectors[i][j];\r\n            if (vectors[i][j] > maxs[j]) maxs[j] = vectors[i][j];\r\n        }\r\n    }\r\n    return { mins, maxs };\r\n};\r\n\r\n// --- Processing Functions ---\r\n\r\nconst standardize = (vectors: number[][], isOHEColumn: boolean[]): number[][] => {\r\n    console.log(\"[Data Processing Worker] Standardizing (Z-score) skipping OHE...\", vectors.length);\r\n    const { means, stdDevs } = getColumnStats(vectors);\r\n    const processedVectors: number[][] = [];\r\n    const numCols = vectors[0]?.length ?? 0;\r\n\r\n    if (numCols !== isOHEColumn.length) {\r\n        console.error('[Data Processing Worker] Mismatch between vector columns and OHE definition length.');\r\n        throw new Error('Vector column count does not match OHE definition length during standardization.');\r\n    }\r\n\r\n    for (let i = 0; i < vectors.length; i++) {\r\n        const row: number[] = [];\r\n        for (let j = 0; j < numCols; j++) {\r\n            if (isOHEColumn[j]) {\r\n                row.push(vectors[i][j]);\r\n            } else {\r\n                const stdDev = stdDevs[j];\r\n                const scaledValue = (stdDev === 0) ? 0 : (vectors[i][j] - means[j]) / stdDev;\r\n                row.push(scaledValue);\r\n            }\r\n        }\r\n        processedVectors.push(row);\r\n    }\r\n    console.log(\"[Data Processing Worker] Standardization complete (OHE skipped).\");\r\n    return processedVectors;\r\n};\r\n\r\nconst normalize = (vectors: number[][], isOHEColumn: boolean[], range: NormalizationRange = [0, 1]): number[][] => {\r\n    console.log(`[Data Processing Worker] Normalizing (Min-Max) to [${range.join(', ')}] skipping OHE...`, vectors.length);\r\n    const { mins, maxs } = getColumnMinMax(vectors);\r\n    const [minRange, maxRange] = range;\r\n    const processedVectors: number[][] = [];\r\n    const numCols = vectors[0]?.length ?? 0;\r\n\r\n    if (numCols !== isOHEColumn.length) {\r\n        console.error('[Data Processing Worker] Mismatch between vector columns and OHE definition length.');\r\n        throw new Error('Vector column count does not match OHE definition length during normalization.');\r\n    }\r\n\r\n     for (let i = 0; i < vectors.length; i++) {\r\n        const row: number[] = [];\r\n        for (let j = 0; j < numCols; j++) {\r\n            if (isOHEColumn[j]) {\r\n                row.push(vectors[i][j]);\r\n            } else {\r\n                const minCol = mins[j];\r\n                const maxCol = maxs[j];\r\n                const rangeCol = maxCol - minCol;\r\n                let scaledValue: number;\r\n                if (rangeCol === 0) {\r\n                    scaledValue = minRange;\r\n                } else {\r\n                    scaledValue = minRange + ((vectors[i][j] - minCol) * (maxRange - minRange)) / rangeCol;\r\n                }\r\n                row.push(scaledValue);\r\n            }\r\n        }\r\n        processedVectors.push(row);\r\n    }\r\n    console.log(\"[Data Processing Worker] Normalization complete (OHE skipped).\");\r\n    return processedVectors;\r\n};\r\n\r\n\r\n// Worker message handler\r\nself.onmessage = (event: MessageEvent<{ type: string; payload: any }>) => {\r\n    const { type, payload } = event.data;\r\n    console.log(`[Data Processing Worker] Received message: ${type}`);\r\n\r\n    switch (type) {\r\n        case 'processData':\r\n            try {\r\n                const { vectors, songIds, isOHEColumn, method, range } = payload as ProcessDataPayload;\r\n                let processedVectors: number[][] = [];\r\n\r\n                if (!vectors || vectors.length === 0) {\r\n                    throw new Error(\"Received empty or invalid vectors for processing.\");\r\n                }\r\n\r\n                if (!isOHEColumn || isOHEColumn.length !== vectors[0]?.length) {\r\n                    throw new Error(\"Received invalid or mismatched OHE column definition.\");\r\n                }\r\n\r\n                // --- Log Matrix BEFORE Processing ---\r\n                console.log(`[Data Processing Worker] Matrix BEFORE processing (Method: ${method}, ${vectors.length}x${vectors[0]?.length}):`);\r\n                // Note: console.table might be slow or truncated for very large matrices.\r\n                console.table(vectors);\r\n                // --- End Log ---\r\n\r\n                switch (method) {\r\n                    case 'standardize':\r\n                        processedVectors = standardize(vectors, isOHEColumn);\r\n                        break;\r\n                    case 'normalize':\r\n                        if (!range) {\r\n                            console.warn(\"[Data Processing Worker] Normalization range not provided, defaulting to [0, 1].\");\r\n                        }\r\n                        processedVectors = normalize(vectors, isOHEColumn, range ?? [0, 1]);\r\n                        break;\r\n                    case 'none':\r\n                    default: // Pass through if 'none' or unknown\r\n                         console.log(\"[Data Processing Worker] Method is 'none', passing data through.\");\r\n                        processedVectors = vectors;\r\n                        break;\r\n                }\r\n\r\n                // --- Log Matrix AFTER Processing ---\r\n                console.log(`[Data Processing Worker] Matrix AFTER processing (Method: ${method}, ${processedVectors.length}x${processedVectors[0]?.length}):`);\r\n                // Note: console.table might be slow or truncated for very large matrices.\r\n                console.table(processedVectors);\r\n                // --- End Log ---\r\n\r\n                // Send processed data back to the main thread\r\n                self.postMessage({\r\n                    type: 'processingComplete',\r\n                    payload: { processedVectors, songIds }\r\n                });\r\n\r\n            } catch (error: any) {\r\n                 console.error(\"[Data Processing Worker] Error processing data:\", error);\r\n                self.postMessage({\r\n                    type: 'processingError',\r\n                    payload: { error: error.message || 'Unknown processing error' }\r\n                });\r\n            }\r\n            break;\r\n\r\n        case 'init': // Placeholder for potential future initialization\r\n            console.log(\"[Data Processing Worker] Initialized.\");\r\n            // Optionally post back readiness\r\n             self.postMessage({ type: 'dataProcessingWorkerReady', payload: true });\r\n            break;\r\n\r\n        default:\r\n            console.warn(`[Data Processing Worker] Unknown message type received: ${type}`);\r\n    }\r\n};\r\n\r\n// Optional: Handle initialization errors or unhandled rejections\r\nself.onerror = (event) => {\r\n    console.error('[Data Processing Worker] Uncaught error:', event);\r\n    // Optionally inform the main thread about a critical failure\r\n};\r\n\r\nconsole.log(\"[Data Processing Worker] Worker script loaded.\");\r\n// Signal readiness on load (alternative to explicit 'init' message)\r\n// self.postMessage({ type: 'dataProcessingWorkerReady', payload: true }); "],"names":[],"sourceRoot":""}